datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String              @id @default(cuid())
  name                   String?
  surname                String?
  email                  String?             @unique
  passwords              HashedPasswords[]
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  bankAccounts           BankAccount?
  sensitiveData          SensitiveData?
  resetPasswordToken     ResetPasswordToken?
  lastUsedMask           Mask?               @relation(fields: [lastUsedMaskId], references: [id])
  lastUsedMaskId         String?
  passwordHashToVerify   String?
  failedLoginAttempts    Int                 @default(0)
  lastFailedLoginAttempt DateTime?
}

model HashedPasswords {
  id       String  @id @default(cuid())
  userId   String
  password String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mask     Mask?   @relation(fields: [maskId], references: [id], onDelete: Cascade)
  maskId   String?
}

model Mask {
  id              String            @id @default(cuid())
  userId          String            
  mask            String
  users           User[]
  hashedPasswords HashedPasswords[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id              String   @id @default(cuid())
  senderNumber    String
  senderName      String
  amount          Decimal  @default(0) @db.Decimal(10, 2)
  title           String
  recipientNumber String
  recipientName   String
  createdAt       DateTime @default(now())

  sender    BankAccount @relation("sentTransactions", fields: [senderNumber], references: [accountNumber])
  recipient BankAccount @relation("receivedTransactions", fields: [recipientNumber], references: [accountNumber])
}

model SensitiveData {
  id               String @id @default(cuid())
  userId           String @unique
  cardNumber       String @unique
  identityDocument String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankAccount {
  id                   String        @id @default(cuid())
  userId               String        @unique
  balance              Decimal       @default(0) @db.Decimal(10, 2)
  accountNumber        String        @unique
  sentTransactions     Transaction[] @relation("sentTransactions")
  receivedTransactions Transaction[] @relation("receivedTransactions")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  userId  String   @unique
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id])
}

//TODO: add hardcoded users
